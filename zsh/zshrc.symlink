# shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$HOME/.dotfiles

# projets folder
export PROJECTS=~/Documents/Projects

# Environment variables found in ~/.localrc that won't be pushed/public
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# zsh files that we're combining
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)
# load each one
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the files we don't want to load
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# Oh My Zsh could be installed somewhere out of dotfiles directory tree, e.g.
# into  ~/.oh-my-zsh; the configuration file created by Oh My Zsh installer
# should be moved as follows: {.zshrc => $DOTFILES/zsh/oh-my-zshrc}.
# echo "Hey whatup"
if [[ -f $DOTFILES/zsh/oh-my-zshrc ]]; then
  # save aliases so we can recover after the flood
  local save_aliases=$(alias -L)
  # source it
  local ZSH="$HOME/.oh-my-zsh"
  source $DOTFILES/zsh/oh-my-zshrc
  export OHMYZSH="$ZSH"
  # recover aliases
  eval $save_aliases
else
  # initialize autocomplete here, otherwise functions won't be loaded
  autoload -U compinit
  compinit
fi

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down
