# shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$HOME/.dotfiles

# before we do anything else
export EDITOR=emacs

# projects folder
export PROJECTS=~/Documents/Projects

# Environment variables found in ~/.localrc that won't be pushed/public
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# zsh files that we're combining
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)
# load each one
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the files we don't want to load
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

#### Load custom shell configuration ####
# save aliases so we can recover after the flood
local save_aliases=$(alias -L)

# Prezto or Oh My Zsh could be installed somewhere out of dotfiles 
# directory tree, e.g. into  ~/.oh-my-zsh, ~/.zprezto; the configuration file
# created by the respective installer will be moved to the dotfiles dir:
# { 
#   .zshrc => $DOTFILES/zsh/oh-my-zsh
#   .zpreztorc => $DOTFILES/zsh/zpreztorc.symlink 
# }
# Source a shell if we find one is installed, else use custom zsh configs.
# Install Oh My Zsh in ~/.oh-my-zsh; it defaults to installing to ~/.dotfiles!
export OHMYZSH="$HOME/.oh-my-zsh"
if [[ -d "$OHMYZSH" ]]
then
  # Since Oh My Zsh pollutes zshrc, we need to keep it separate.
  # Installation will have moved that new file here if none existed.
  source $DOTFILES/zsh/oh-my-zshrc
elif [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]
then
  # Source prezto from init, which will reference our symlinked config.
  # Installation will have copied .zpreztorc here if none existed.
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
else
  # initialize autocomplete here, otherwise functions won't be loaded
  autoload -U compinit
  compinit
fi
# recover aliases
eval "$save_aliases"
########

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
